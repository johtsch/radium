VAR:
    IPv4_A host 192.168.2.116;
    IPv4_A victim 192.168.2.1;
    2B dport 8080;
    2B sport 9999;
    IPv4_H ip_h;
    TCP tcp_h;
:VAR

IMPLEMENTATION:

S[0]{REPEAT=50ms}:                          # S[1]==Step 1

    DESCRIPTION:
        Hier kann dann eine Beschreibung des aktuellen Schrittes stehen, die dann hoffentlich auch im Programm angezeigt werden kann ^^
    :DESCRIPTION

    ASSEMBLE[1]:
        L2:
            STD;                            # standard == ist mir egal was da hinkommt diese schicht ist unbedeutend
        :L2

        #Anmerkung: L1 kann nicht festgelegt werden und für L2 ist Ethernet festgelegt -> es kann nicht anders als STD; festgelegt werden!!

        L3:
            ip_h=LOAD(IPv4);                # Infos zum IPv4 Header laden
            ip_h.sip=host;
            ip_h.dip=victim;
            ip_h.proto=TCP;
        :L3
        L4:
            tcp_h.sport=sport;
            tcp_h.dport=dport;
            tcp_h.seq_num=1283891283;
            tcp_h.ack_num=2189324743;
            tcp_h.SYN=1;
        :L4
        L5:
            # wenn es einen Datenteil geben würde könnte das Kommando dazu so aussehen
            DATA("direction/to/file/containing/data");
        :L5
    :ASSEMBLE[1]

    SEND(PACKET[1]);
:S[0]
T[0]:                                       # T[1]==Trigger 1
    PACKETFILTER:
        L3:
            IPv4:                           # das IPv4 Paket soll folgende Parameter erfüllen
                SOURCE=victim;
            :IPv4
        :L3
    :PACKETFILTER
:T[0]
S[1]:

:S[1]

:IMPLEMENTATION
